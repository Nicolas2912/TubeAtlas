name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # PARALLEL JOB 1: Code Quality & Linting (runs in parallel)
  # =============================================================================
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        clean: true

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    # Enhanced Poetry dependency caching with multiple cache keys
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pypoetry
          ~/.cache/pip
          ~/.local/share/pypoetry
        key: lint-poetry-v2-${{ runner.os }}-py312-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}
        restore-keys: |
          lint-poetry-v2-${{ runner.os }}-py312-
          lint-poetry-v2-${{ runner.os }}-

    - name: Install Poetry (cached)
      uses: snok/install-poetry@v1
      with:
        version: 1.8.3
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached virtual environment
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: lint-venv-v2-${{ runner.os }}-py312-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          lint-venv-v2-${{ runner.os }}-py312-

    - name: Install dependencies (only if cache miss)
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --with dev --no-interaction --no-ansi

    - name: Cache pre-commit hooks
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-v2-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          pre-commit-v2-${{ runner.os }}-

    - name: Run pre-commit hooks
      run: |
        poetry run pre-commit run --all-files

  # =============================================================================
  # PARALLEL JOB 2: Run Tests & Coverage (runs in parallel)
  # =============================================================================
  test:
    name: Run Tests & Coverage
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        clean: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # Enhanced Poetry dependency caching
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pypoetry
          ~/.cache/pip
          ~/.local/share/pypoetry
        key: test-poetry-v2-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}
        restore-keys: |
          test-poetry-v2-${{ runner.os }}-py${{ matrix.python-version }}-
          test-poetry-v2-${{ runner.os }}-

    - name: Install Poetry (cached)
      uses: snok/install-poetry@v1
      with:
        version: 1.8.3
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached virtual environment
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: test-venv-v2-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          test-venv-v2-${{ runner.os }}-py${{ matrix.python-version }}-

    - name: Install dependencies (only if cache miss)
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --with dev --no-interaction --no-ansi

    - name: Cache pytest cache
      uses: actions/cache@v4
      with:
        path: .pytest_cache
        key: pytest-cache-v2-${{ runner.os }}-${{ hashFiles('tests/**/*.py') }}
        restore-keys: |
          pytest-cache-v2-${{ runner.os }}-

    - name: Run tests with coverage
      run: |
        poetry run pytest -q --cov=src/tubeatlas --cov-report=xml --cov-report=html --cov-report=term-missing --ignore=legacy

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30

    - name: Coverage Summary
      run: |
        echo "## Test Coverage Summary 📊" >> $GITHUB_STEP_SUMMARY
        echo "Coverage report generated and uploaded as artifact." >> $GITHUB_STEP_SUMMARY
        echo "Download the artifact to view detailed HTML coverage report." >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # JOB 3: Build & Push Docker Image (waits for lint + test)
  # =============================================================================
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    timeout-minutes: 25  # Reduced from 30 minutes

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        clean: true

    # More targeted disk cleanup (faster)
    - name: Optimized disk space cleanup
      run: |
        echo "📦 Initial disk usage:" && df -h
        # Remove only the largest space consumers
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL || true
        sudo rm -rf /usr/local/share/boost /usr/local/graalvm || true
        # Clean package caches
        sudo apt-get clean && sudo apt-get autoremove -y
        echo "📦 Disk usage after cleanup:" && df -h

    # Normalize image name to lowercase for OCI compliance
    - name: Normalize image name (lowercase)
      run: echo "IMAGE_NAME_LOWER=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    # Enhanced Docker Buildx setup with optimizations
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
        driver-opts: |
          network=host
          image=moby/buildkit:v0.12.0
        buildkitd-flags: |
          --allow-insecure-entitlement security.insecure
          --allow-insecure-entitlement network.host

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,format=short,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    # Enhanced Docker build with improved caching and compression
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile.optimized
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Multi-layered caching strategy for maximum efficiency
        cache-from: |
          type=gha
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:cache
        cache-to: |
          type=gha,mode=max
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:cache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          DOCKER_BUILDKIT=1
        # Enhanced build optimizations
        provenance: false  # Reduces build time
        sbom: false       # Reduces build time
        outputs: type=registry,compression=gzip,compression-level=6,force-compression=true

    - name: Generate build summary
      run: |
        echo "## Docker Build Summary 🐳" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:** " >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # JOB 4: Security Scan (runs after build)
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    timeout-minutes: 10  # Reduced from 15 minutes

    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        clean: true

    # Minimal cleanup for security scan
    - name: Minimal disk cleanup
      run: |
        docker system prune -f --volumes || true
        echo "📦 Disk usage:" && df -h

    # Convert IMAGE_NAME to lower-case for OCI compliance
    - name: Normalize image name (lowercase)
      run: echo "IMAGE_NAME_LOWER=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    # Generate short SHA for image reference (matching the build step)
    - name: Generate short SHA
      run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

    # Log in to Container Registry to ensure access to the image
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Optimized image verification with shorter timeout
    - name: Verify image exists
      run: |
        echo "Checking if image exists: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:sha-${{ env.SHORT_SHA }}"

        # Wait up to 1 minute for the image to be available (reduced from 2 minutes)
        for i in {1..6}; do
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:sha-${{ env.SHORT_SHA }} > /dev/null 2>&1; then
            echo "✅ Image found and accessible"
            echo "IMAGE_TAG=sha-${{ env.SHORT_SHA }}" >> $GITHUB_ENV
            break
          else
            echo "⏳ Attempt $i/6: Image not yet available, waiting 10 seconds..."
            sleep 10
          fi

          if [ $i -eq 6 ]; then
            echo "❌ SHA-based image not found after 1 minute"
            echo "Trying fallback to latest tag for main branch..."

            if [ "${{ github.ref }}" == "refs/heads/main" ]; then
              if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest > /dev/null 2>&1; then
                echo "✅ Using latest tag as fallback"
                echo "IMAGE_TAG=latest" >> $GITHUB_ENV
                break
              fi
            fi

            echo "❌ No accessible image found"
            echo "Attempted tags:"
            echo "  - sha-${{ env.SHORT_SHA }}"
            echo "  - latest (main branch only)"
            exit 1
          fi
        done

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ env.IMAGE_TAG }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        timeout: '8m'  # Reduced from 10 minutes
        exit-code: '0'  # Don't fail the job on vulnerabilities, just report them

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Generate security summary
      if: always()
      run: |
        echo "## Security Scan Summary 🔒" >> $GITHUB_STEP_SUMMARY
        echo "**Image Scanned:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY
        if [ -f "trivy-results.sarif" ]; then
          echo "**Status:** Scan completed successfully ✅" >> $GITHUB_STEP_SUMMARY
          echo "**Results:** Check the Security tab for detailed vulnerability report" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Status:** Scan failed or results not generated ❌" >> $GITHUB_STEP_SUMMARY
        fi
