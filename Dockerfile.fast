# =============================================================================
# Multi-stage Dockerfile optimized for speed
# Uses pre-built wheels and eliminates unnecessary build dependencies
# =============================================================================

# =============================================================================
# Builder Stage - Only for dependencies that need compilation
# =============================================================================
FROM python:3.12-slim AS builder

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1

# Install only minimal build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry with pip (fastest method)
RUN pip install poetry==1.8.3

# Configure Poetry for speed
RUN poetry config virtualenvs.create false \
    && poetry config installer.parallel true \
    && poetry config installer.max-workers 10

WORKDIR /app

# Copy dependency files
COPY pyproject.toml poetry.lock ./

# Install only dependencies that need compilation
# Most ML libraries already have pre-built wheels for ARM64
RUN poetry install --only=main --no-interaction --no-ansi --no-root

# =============================================================================
# Runtime Stage - Minimal production image
# =============================================================================
FROM python:3.12-slim AS runtime

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH="/app/src"

# Install only runtime dependencies (no build tools)
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Create application user
RUN groupadd -g 1001 appuser && \
    useradd -r -u 1001 -g appuser -d /home/appuser -s /bin/bash -c "App User" appuser && \
    mkdir -p /home/appuser/.local && \
    chown -R appuser:appuser /home/appuser

# Copy Python packages from builder
COPY --from=builder --chown=appuser:appuser /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder --chown=appuser:appuser /usr/local/bin /usr/local/bin

# Set working directory
WORKDIR /app

# Copy application source (keep this last for best caching)
COPY --chown=appuser:appuser src/ ./src/
COPY --chown=appuser:appuser pyproject.toml ./
COPY --chown=appuser:appuser .env.template ./

# Switch to non-root user
USER appuser

# Expose application port
EXPOSE 8000

# Optimized health check
HEALTHCHECK --interval=15s --timeout=5s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["uvicorn", "tubeatlas.main:app", "--host", "0.0.0.0", "--port", "8000"]
