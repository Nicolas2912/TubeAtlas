# =============================================================================
# Base Python Image with pre-installed system packages
# =============================================================================
FROM python:3.12-slim AS base

# Set environment variables for Python
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache \
    POETRY_VERSION=1.8.3

# =============================================================================
# System Dependencies Stage (Cached Layer)
# =============================================================================
FROM base AS system-deps

# Install system dependencies in a single layer with minimal packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build essentials (only what's needed)
    build-essential \
    curl \
    # Cleanup in same layer
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# =============================================================================
# Poetry Installation Stage (Cached Layer)
# =============================================================================
FROM system-deps AS poetry-installer

# Install Poetry with pip (faster than curl method)
RUN pip install poetry==$POETRY_VERSION

# Configure Poetry settings for container use
RUN poetry config virtualenvs.create false \
    && poetry config installer.parallel true \
    && poetry config installer.max-workers 10

# =============================================================================
# Dependencies Installation Stage (Most Cacheable)
# =============================================================================
FROM poetry-installer AS deps-installer

WORKDIR /app

# Copy only dependency files first for maximum cache efficiency
COPY pyproject.toml poetry.lock ./

# Install dependencies with optimizations
RUN poetry install --only=main --no-interaction --no-ansi --no-root

# =============================================================================
# Source Code Stage
# =============================================================================
FROM deps-installer AS app-builder

# Copy source code
COPY src/ ./src/

# =============================================================================
# Runtime Stage - Minimal runtime environment
# =============================================================================
FROM python:3.12-slim AS runtime

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/usr/local/bin:$PATH" \
    PYTHONPATH="/app/src"

# Install ONLY runtime dependencies (minimal set)
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Create non-root user
RUN groupadd -g 1001 appuser && \
    useradd -r -u 1001 -g appuser -d /home/appuser -s /bin/bash -c "App User" appuser && \
    mkdir -p /home/appuser/.local && \
    chown -R appuser:appuser /home/appuser

# Copy installed packages from deps stage in a single layer
COPY --from=deps-installer --chown=appuser:appuser /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=deps-installer --chown=appuser:appuser /usr/local/bin /usr/local/bin

# Set work directory and copy source code
WORKDIR /app
COPY --from=app-builder --chown=appuser:appuser /app/src ./src

# Copy additional necessary files
COPY --chown=appuser:appuser pyproject.toml ./
COPY --chown=appuser:appuser .env.template ./

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check with optimized settings
HEALTHCHECK --interval=15s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["uvicorn", "tubeatlas.main:app", "--host", "0.0.0.0", "--port", "8000"]
