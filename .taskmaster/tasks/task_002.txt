# Task ID: 2
# Title: Implement Database Schema & ORM Models
# Status: done
# Dependencies: 1
# Priority: medium
# Description: Translate PRD SQL schema to SQLAlchemy models with concurrency-safe SQLite setup.
# Details:
1. Create config/database.py with SQLAlchemy async engine: `sqlite+aiosqlite:///tubeatlas.db` and session factory using async_sessionmaker(pool_size=20).
2. Define Base = declarative_base().
3. Implement models/video.py, transcript.py, knowledge_graph.py, processing_task.py reflecting all columns & indexes. Escape reserved words.
4. Provide Alembic-less simple `create_all()` util for SQLite; but leave hooks for future migrations.
5. Create composite indexes mirroring PRD (e.g. Index('ix_kg_channel', KnowledgeGraph.channel_id)).
6. Implement repository layer with BaseRepository CRUD + dedicated repositories.
7. Add connection healthcheck middleware for FastAPI.
Pseudo-code:
```python
class Video(Base):
    __tablename__ = "videos"
    id = Column(String, primary_key=True)
    channel_id = Column(String, nullable=False, index=True)
    ...
```


# Test Strategy:
• Spin up in-memory DB: `sqlite+aiosqlite:///:memory:`.
• Pytest fixture creates tables, inserts sample rows, verifies FK constraints.
• Concurrency test: 50 async tasks acquire session → commit without `OperationalError`.
• Query performance test: insert 100k videos then measure `<500ms` for indexed lookup.

# Subtasks:
## 1. Configure Async SQLite Engine and Session Factory [done]
### Dependencies: None
### Description: Create config/database.py configuring an async-safe SQLite engine and session factory.
### Details:
• Use URL: sqlite+aiosqlite:///tubeatlas.db
• Instantiate async_engine = create_async_engine(url, pool_size=20, echo=False, future=True)
• Provide async_sessionmaker(bind=async_engine, expire_on_commit=False) named AsyncSessionLocal
• Add get_session() async dependency yielding an AsyncSession inside try/ finally.
• Export engine and session factory so other modules can import without circular references.
<info added on 2025-06-27T13:51:44.549Z>
Additional implementation notes and acceptance criteria:

• Place all engine, sessionmaker, Declarative Base, and create_all helpers in `src/tubeatlas/config/database.py` so that external modules can simply `from tubeatlas.config.database import async_engine, AsyncSessionLocal, Base, init_models`.
• Define `Base = declarative_base()` immediately after imports; expose it via `__all__`.
• Provide `async def init_models() -> None` that:
  – opens an `async_engine.begin()` context
  – calls `await conn.run_sync(Base.metadata.create_all)`
  – is idempotent and safe to call during application startup or test setup.
• Supply naming conventions for constraints inside `Base.metadata` (e.g., pk_%(table_name)s, fk_%(table_name)s_%(column_0_name)s) to avoid Alembic conflicts later.
• Write `tests/test_database.py` using `pytest-asyncio` that:
  1. acquires a session via `get_session()` and issues a simple `SELECT 1`.
  2. invokes `init_models()` and asserts that `Base.metadata.sorted_tables` is not empty.
• Tests must pass with `pytest -q` inside the active TubeAtlas conda environment.
</info added on 2025-06-27T13:51:44.549Z>
<info added on 2025-06-27T13:52:30.984Z>
Additional adjustments required for this sub-task:

• Ensure the connection URL is exactly sqlite+aiosqlite:///tubeatlas.db (no relative ./ prefix).
• Pass pool_size=20 when calling create_async_engine.
• Rename async dependency to get_session() and adjust imports/tests accordingly.
• Add __all__ = ["async_engine", "AsyncSessionLocal", "Base", "get_session", "init_models"] at module foot.
• Define naming_convention in MetaData({}) and bind it to declarative_base to standardise pk_ / fk_ / uq_ patterns.
• Replace any create_tables()/drop_tables() helpers with a single async init_models() routine that is idempotent (no failure if tables already exist).
• Update tests and any consumer modules to use new names and exports.
</info added on 2025-06-27T13:52:30.984Z>
<info added on 2025-06-27T13:56:45.784Z>
Implementation finished and verified:

• `src/tubeatlas/config/database.py` now fulfils every listed requirement (engine, session, Base, naming conventions, __all__, get_session, init_models).
• Added `greenlet` to dependencies and resolved SQLAlchemy/Pydantic deprecations.
• New `tests/test_database.py` contains five async pytest cases covering engine, session factory, naming conventions, init_models idempotency, and a basic SELECT; all pass (`pytest -q` shows 5/5).
• Module exports work via `from tubeatlas.config.database import async_engine, AsyncSessionLocal, Base, get_session, init_models`.
• Sub-task complete; ready for parent task integration.
</info added on 2025-06-27T13:56:45.784Z>

## 2. Define Declarative Base and create_all Utility [done]
### Dependencies: 2.1
### Description: Establish declarative Base and a utility to create all tables without Alembic, leaving hooks for future migrations.
### Details:
• In config/database.py (or separate metadata.py), declare Base = declarative_base()
• Implement async def create_all() using async_engine.begin() as conn: await conn.run_sync(Base.metadata.create_all)
• Place a TODO comment referencing Alembic for future migrations and keep metadata object publicly available.
<info added on 2025-06-27T14:12:46.807Z>
• Insert a clear “TODO: integrate Alembic for schema migrations” comment directly above the create-all helper
• Add `metadata` (Base.metadata) to `__all__` so it is publicly importable
• Standardize the public bootstrap function name to `create_all()` (optionally keep `init_models()` as an alias for backward compatibility) and adjust internal references/tests accordingly
• Expand tests to assert that `metadata` is importable from `config.database` and that the Alembic TODO comment exists in the module source
</info added on 2025-06-27T14:12:46.807Z>
<info added on 2025-06-27T14:15:12.344Z>
• Implementation completed and verified: `create_all()` async helper added with full docstring, runs `Base.metadata.create_all` in transactional context and remains idempotent
• Explicit “TODO: Integrate Alembic for schema migrations in future versions” comment inserted directly above the helper (also referenced in docstring)
• `metadata` (Base.metadata) added to `__all__`, importable as `config.database.metadata`
• Legacy alias `init_models = create_all` retained for backward compatibility
• Test suite expanded to 9 cases; all pass, including new checks for table creation, metadata export, and presence of Alembic TODO comment
</info added on 2025-06-27T14:15:12.344Z>

## 3. Implement ORM Models with Columns and Indexes [done]
### Dependencies: 2.1, 2.2
### Description: Translate PRD SQL schema into SQLAlchemy models for videos, transcripts, knowledge graphs, and processing tasks.
### Details:
• Create app/models/ directory with video.py, transcript.py, knowledge_graph.py, processing_task.py
• Each model inherits from Base and declares __tablename__ explicitly.
• Reflect all columns, types, PKs, FKs, nullable flags, defaults.
• Escape reserved words via quoted_name or name_ parameter if necessary.
• Add simple & composite indexes using Index/UniqueConstraint to mirror PRD (e.g., Index('ix_kg_channel', KnowledgeGraph.channel_id)).
• Import Base from step 2 and Column types from sqlalchemy.
• Keep __repr__ methods for debugging.
<info added on 2025-06-27T14:22:24.457Z>
• Replace local Base definitions in every model with a single shared import: `from tubeatlas.config.database import Base`.
• Cross-check all column names, types, nullability, defaults, PK/FK relationships and constraints against the PRD; adjust discrepancies accordingly.
• Add any missing single- or multi-column indexes/unique constraints required by the PRD (e.g., ix_video_published_at, uq_transcript_video_id_lang, ix_processing_task_status_created_at).
• Create/modify app/models/__init__.py to re-export Video, Transcript, KnowledgeGraph and ProcessingTask for clean external imports.
• Write pytest suite (tests/models/) that spins up an in-memory SQLite engine, runs `Base.metadata.create_all(engine)`, and asserts:
  – every expected table/column exists,
  – indexes/unique constraints are present,
  – basic insert/select operations honour PKs, FKs and defaults.
• Add these tests to CI so schema regressions are caught automatically.
</info added on 2025-06-27T14:22:24.457Z>
<info added on 2025-06-27T14:27:12.621Z>
• Implementation completed and merged: centralized Base import, PRD-aligned columns, constraints, and defaults across all four ORM models
• Added/renamed indexes (`ix_knowledge_graphs_video_id`, `ix_knowledge_graphs_channel_id`, etc.) per naming convention
• `app/models/__init__.py` now re-exports Video, Transcript, KnowledgeGraph, ProcessingTask for clean external access
• ProcessingTask moved to its own module; all `__repr__` methods verified
• Test suite (12 cases) spins up in-memory SQLite, asserts schema, indexes, CRUD behaviour and __repr__ output; all tests pass and are wired into CI
• Datetime defaults updated to `datetime.now(UTC)` to suppress deprecation warnings
• Overall: 21 total tests green, confirming schema integrity and model functionality
</info added on 2025-06-27T14:27:12.621Z>

## 4. Build Repository Layer with CRUD Operations [done]
### Dependencies: 2.3
### Description: Create reusable BaseRepository and model-specific repositories encapsulating async CRUD logic.
### Details:
• In app/repositories/, define BaseRepository<T> with create, get, update, delete, list methods accepting AsyncSession.
• Use SQLAlchemy 2.0 style async queries (select(), update(), delete()).
• Implement VideoRepository, TranscriptRepository, KnowledgeGraphRepository, ProcessingTaskRepository inheriting from BaseRepository and adding domain-specific helpers (e.g., list_by_channel).
• Ensure methods receive session via dependency injection (get_session from step 1).

## 5. Integrate Healthcheck Middleware and Startup Hooks into FastAPI [done]
### Dependencies: 2.1
### Description: Add middleware/endpoints to verify DB connectivity and ensure tables are created at application startup.
### Details:
• In main.py, add @app.on_event('startup') async def db_startup(): await create_all() and test a simple SELECT 1.
• Implement middleware catching DB exceptions and transforming into 503 errors.
• Add /health/db endpoint that opens an AsyncSession, runs SELECT 1, and returns 200 OK if success.
• Register middleware and endpoint with FastAPI.
<info added on 2025-06-27T15:46:50.484Z>
• Implementation verified: lifespan-based startup/shutdown, health middleware, and `/health` endpoints are all live and tested (Task 2.5 COMPLETE).
</info added on 2025-06-27T15:46:50.484Z>
